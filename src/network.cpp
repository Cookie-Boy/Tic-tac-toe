#include "network.hpp"

int NetworkManager::getSocket() const { return sockfd; }

void NetworkManager::setMyFigure(Figure myFigure) { this->myFigure = myFigure; }

Figure NetworkManager::getOpponentFigure() const { return opponentFigure; }

bool NetworkManager::isReady() const { return ready; }

void NetworkManager::setIpList(std::vector<std::string> ipList) {
    this->ipList = ipList;
}

void NetworkManager::setPort(int port) {
    this->port = port;
}

bool NetworkManager::getReadyToContinue() {
    return this->readyToContinue;
}

void NetworkManager::setReadyToContinue(bool readyToContinue) {
    this->readyToContinue = readyToContinue;
}

bool NetworkManager::getEnemyReady() {
    return this->enemyReady;
}

void NetworkManager::setEnemyReady(bool enemyReady) {
    this->enemyReady = enemyReady;
}

void NetworkManager::initialize() {
    for (const auto& ip : ipList) {
        if (tryConnect(ip.c_str(), port, sockfd, myFigure, opponentFigure)) {
            ready = true;
            std::cout << "‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ " << ip << " –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç.\n";
            return;
        }
    }

    // –°—Ç–∞–ª–∏ —Å–µ—Ä–≤–µ—Ä–æ–º
    serverThread = std::thread([this]() {
        sockfd = waitForClient(port, myFigure);
        opponentFigure = myFigure == Figure::Cross ? Figure::Zero : Figure::Cross;
        ready = true;
        std::cout << "üü¢ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É.\n";
    });
    serverThread.detach();
}

void NetworkManager::disconnect() {
    if (sockfd != -1) {
        shutdown(sockfd, SHUT_RDWR);
        close(sockfd);
        sockfd = -1;
        ready = false;
        enemyReady = false;
    }
}

bool NetworkManager::tryConnect(const char* ip, int port, int& outSock, Figure myFigure, Figure& serverFigure) {
    int s = socket(AF_INET, SOCK_STREAM, 0);
    if (s < 0) return false;

    linger ling = {1, 0};
    setsockopt(s, SOL_SOCKET, SO_LINGER, &ling, sizeof(ling));

    sockaddr_in addr{};
    addr.sin_family = AF_INET;
    addr.sin_port = htons(port);
    inet_pton(AF_INET, ip, &addr.sin_addr);

    if (connect(s, (sockaddr*)&addr, sizeof(addr)) < 0) {
        std::cout << "üü° –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É." << std::endl;
        close(s);
        return false;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–µ–ª–∞–µ–º—É—é —Ñ–∏–≥—É—Ä—É
    uint8_t desired = static_cast<uint8_t>(myFigure);
    send(s, &desired, sizeof(desired), 0);

    // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç (—Ñ–∏–≥—É—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –æ—Ç–∫–∞–∑)
    uint8_t response;
    if (recv(s, &response, sizeof(response), 0) <= 0 || response == 0xFF) {
        std::cout << "‚ö†Ô∏è –§–∏–≥—É—Ä—ã —Å–æ–≤–ø–∞–ª–∏, —Ç–∞–∫–æ–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç" << std::endl;
        close(s);
        sleep(1);
        return false;
    }

    serverFigure = static_cast<Figure>(response);
    outSock = s;
    return true;
}

int NetworkManager::waitForClient(int port, Figure serverFigure) {
    while (true) {
        std::cout << "üü° –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞...\n";

        int listener = socket(AF_INET, SOCK_STREAM, 0);
        if (listener < 0) {
            perror("socket");
            sleep(1);
            continue;
        }

        int opt = 1;
        setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));

        sockaddr_in addr{};
        addr.sin_family = AF_INET;
        addr.sin_port = htons(port);
        addr.sin_addr.s_addr = INADDR_ANY;

        if (bind(listener, (sockaddr*)&addr, sizeof(addr)) < 0) {
            perror("bind");
            close(listener);
            sleep(1); // –ü–æ–¥–æ–∂–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ—Ä—Ç –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è
            continue;
        }

        if (listen(listener, SOMAXCONN) < 0) {
            perror("listen");
            close(listener);
            sleep(1);
            continue;
        }

        int clientSock = accept(listener, nullptr, nullptr);
        if (clientSock < 0) {
            perror("accept");
            close(listener);
            continue;
        }

        uint8_t desired;
        if (recv(clientSock, &desired, sizeof(desired), 0) <= 0) {
            std::cout << "‚ö†Ô∏è –û—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ <= 0 –±–∞–π—Ç.\n";
            close(clientSock);
            close(listener);
            continue;
        }

        if (desired == static_cast<uint8_t>(serverFigure)) {
            uint8_t reject = 0xFF;
            std::cout << "‚ö†Ô∏è –§–∏–≥—É—Ä—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç, –æ—Ç–∫–ª–æ–Ω—è–µ–º.\n";
            send(clientSock, &reject, sizeof(reject), 0);
            close(clientSock);
            close(listener);
            continue;
        }

        uint8_t response = static_cast<uint8_t>(serverFigure);
        send(clientSock, &response, sizeof(response), 0);
        close(listener); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        return clientSock;
    }
}